{"version":3,"sources":["../../../../src/components/range/addons/HistogramContainer.js"],"names":["getWidth","index","range","item","props","diff","length","key","end","fullRange","start","HistogramContainer","max","stats","doc_count","forEach","lastElement","interval","map","propTypes","number"],"mappings":";;;;AAAA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,WAAW,SAAXA,QAAW,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAqBC,KAArB,EAA+B;AAC/C,KAAIC,aAAJ;AACA,KAAIJ,QAAQC,MAAMI,MAAN,GAAe,CAA3B,EAA8B;AAC7BD,SAAOH,MAAMD,QAAQ,CAAd,EAAiBM,GAAjB,GAAuBJ,KAAKI,GAAnC;AACA,EAFD,MAEO;AACNF,SAAOD,MAAMF,KAAN,CAAYM,GAAZ,GAAkBL,KAAKI,GAA9B;AACA;AACD,KAAME,YAAYL,MAAMF,KAAN,CAAYM,GAAZ,GAAkBJ,MAAMF,KAAN,CAAYQ,KAAhD;AACA,QAAWL,OAAOI,SAAR,GAAqB,GAA/B;AACA,CATD;;AAWA,IAAME,qBAAqB,SAArBA,kBAAqB,CAACP,KAAD,EAAW;AACrC,KAAIQ,MAAMR,MAAMS,KAAN,CAAY,CAAZ,EAAeC,SAAzB;AACAV,OAAMS,KAAN,CAAYE,OAAZ,CAAoB,UAACZ,IAAD,EAAU;AAC7B,MAAIS,MAAMT,KAAKW,SAAf,EAA0B;AACzBF,SAAMT,KAAKW,SAAX;AACA;AACD,EAJD;;AAMA,KAAIZ,kBAAYE,MAAMS,KAAlB,CAAJ;AACA,KAAIT,MAAMS,KAAN,CAAYP,MAAhB,EAAwB;AACvB,MAAIJ,MAAM,CAAN,EAASK,GAAT,GAAeH,MAAMF,KAAN,CAAYQ,KAA/B,EAAsC;AACrCR,YAAS,EAAEK,KAAKH,MAAMF,KAAN,CAAYQ,KAAnB,EAA0BI,WAAW,CAArC,EAAT,SAAsDZ,KAAtD;AACA;AACD,MAAMc,cAAcd,MAAMA,MAAMI,MAAN,GAAe,CAArB,CAApB;AACA,MAAIU,YAAYT,GAAZ,GAAkBH,MAAMa,QAAxB,GAAmCb,MAAMF,KAAN,CAAYM,GAAnD,EAAwD;AACvDN,qBAAYA,KAAZ,GAAmB,EAAEK,KAAKH,MAAMa,QAAN,GAAiBD,YAAYT,GAApC,EAAyCO,WAAW,CAApD,EAAnB;AACA;AACD;;AAED,QACC;AAAA;AAAA,IAAK,wCAAL;AAEEZ,QAAMgB,GAAN,CAAU,UAACf,IAAD,EAAOF,KAAP;AAAA,UACT;AACC,SAAKE,KAAKI,GADX;AAEC,WAAOP,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,KAA7B,CAFR;AAGC,aAAY,MAAMD,KAAKW,SAAZ,GAAyBF,GAAzB,IAAgC,CAA3C,OAHD;AAIC,WAAOT,KAAKW;AAJb,KADS;AAAA,GAAV;AAFF,EADD;AAcA,CAjCD;;AAmCAH,mBAAmBQ,SAAnB,GAA+B;AAC9BF,WAAU,gBAAMG,MADc;AAE9BlB,QAAO,gBAAMA,KAFiB;AAG9BW,QAAO,gBAAMA;AAHiB,CAA/B;;kBAMeF,kB","file":"HistogramContainer.js","sourcesContent":["import React from 'react';\nimport types from '@appbaseio/reactivecore/lib/utils/types';\n\nimport Histogram, { histogramContainer } from '../../../styles/Histogram';\n\nconst getWidth = (index, range, item, props) => {\n\tlet diff;\n\tif (index < range.length - 1) {\n\t\tdiff = range[index + 1].key - item.key;\n\t} else {\n\t\tdiff = props.range.end - item.key;\n\t}\n\tconst fullRange = props.range.end - props.range.start;\n\treturn `${(diff / fullRange) * 100}%`;\n};\n\nconst HistogramContainer = (props) => {\n\tlet max = props.stats[0].doc_count;\n\tprops.stats.forEach((item) => {\n\t\tif (max < item.doc_count) {\n\t\t\tmax = item.doc_count;\n\t\t}\n\t});\n\n\tlet range = [...props.stats];\n\tif (props.stats.length) {\n\t\tif (range[0].key > props.range.start) {\n\t\t\trange = [{ key: props.range.start, doc_count: 0 }, ...range];\n\t\t}\n\t\tconst lastElement = range[range.length - 1];\n\t\tif (lastElement.key + props.interval < props.range.end) {\n\t\t\trange = [...range, { key: props.interval + lastElement.key, doc_count: 0 }];\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className={histogramContainer}>\n\t\t\t{\n\t\t\t\trange.map((item, index) => (\n\t\t\t\t\t<Histogram\n\t\t\t\t\t\tkey={item.key}\n\t\t\t\t\t\twidth={getWidth(index, range, item, props)}\n\t\t\t\t\t\theight={`${(100 * item.doc_count) / max || 0}%`}\n\t\t\t\t\t\ttitle={item.doc_count}\n\t\t\t\t\t/>\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\t);\n};\n\nHistogramContainer.propTypes = {\n\tinterval: types.number,\n\trange: types.range,\n\tstats: types.stats,\n};\n\nexport default HistogramContainer;\n"]}