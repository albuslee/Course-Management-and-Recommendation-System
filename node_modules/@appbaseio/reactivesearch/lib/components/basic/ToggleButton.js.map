{"version":3,"sources":["../../../src/components/basic/ToggleButton.js"],"names":["ToggleButton","props","state","currentValue","locked","setQueryListener","componentId","onQueryChange","componentWillMount","addComponent","setReact","selectedValue","handleToggle","defaultSelected","componentWillReceiveProps","nextProps","react","dataField","updateQuery","multiSelect","value","componentWillUnmount","removeComponent","watchComponent","render","style","className","title","innerClass","data","map","item","isSelected","some","label","parseValue","Array","isArray","filter","includes","defaultQuery","query","length","bool","boost","minimum_should_match","should","term","isDefaultValue","toggleValue","finalValue","concat","setValue","beforeValueChange","performUpdate","setState","onValueChange","customQuery","filterValue","filterLabel","showFilter","URLParams","propTypes","funcRequired","string","stringRequired","stringOrArray","func","defaultProps","mapStateToProps","selectedValues","mapDispatchtoProps","dispatch","component","updateQueryObject","beforeQueryChange"],"mappings":"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","file":"ToggleButton.js","sourcesContent":["import React, { Component } from 'react';\n\nimport {\n\taddComponent,\n\tremoveComponent,\n\twatchComponent,\n\tupdateQuery,\n\tsetQueryListener,\n} from '@appbaseio/reactivecore/lib/actions';\nimport {\n\tisEqual,\n\tcheckValueChange,\n\tcheckPropChange,\n\tgetClassName,\n} from '@appbaseio/reactivecore/lib/utils/helper';\nimport types from '@appbaseio/reactivecore/lib/utils/types';\n\nimport Title from '../../styles/Title';\nimport Container from '../../styles/Container';\nimport Button, { toggleButtons } from '../../styles/Button';\nimport { connect } from '../../utils';\n\nclass ToggleButton extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tcurrentValue: [],\n\t\t};\n\t\tthis.locked = false;\n\t\tprops.setQueryListener(props.componentId, props.onQueryChange, null);\n\t}\n\n\tcomponentWillMount() {\n\t\tthis.props.addComponent(this.props.componentId);\n\t\tthis.setReact(this.props);\n\n\t\tif (this.props.selectedValue) {\n\t\t\tthis.handleToggle(this.props.selectedValue, true);\n\t\t} else if (this.props.defaultSelected) {\n\t\t\tthis.handleToggle(this.props.defaultSelected, true);\n\t\t}\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tcheckPropChange(this.props.react, nextProps.react, () => {\n\t\t\tthis.setReact(nextProps);\n\t\t});\n\n\t\tcheckPropChange(this.props.dataField, nextProps.dataField, () => {\n\t\t\tthis.updateQuery(this.state.currentValue, nextProps);\n\t\t});\n\n\t\tif (!isEqual(this.props.defaultSelected, nextProps.defaultSelected)) {\n\t\t\tthis.handleToggle(nextProps.defaultSelected, true, nextProps);\n\t\t} else if (nextProps.multiSelect) {\n\t\t\t// for multiselect selectedValue will be an array\n\t\t\tif (!isEqual(this.state.currentValue, nextProps.selectedValue)) {\n\t\t\t\tthis.handleToggle(nextProps.selectedValue || [], true, nextProps);\n\t\t\t}\n\t\t} else {\n\t\t\t// else multiselect will be a string\n\t\t\tconst currentValue = this.state.currentValue[0]\n\t\t\t\t? this.state.currentValue[0].value\n\t\t\t\t: null;\n\t\t\tif (!isEqual(currentValue, nextProps.selectedValue)) {\n\t\t\t\tthis.handleToggle(nextProps.selectedValue || [], true, nextProps);\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.props.removeComponent(this.props.componentId);\n\t}\n\n\tstatic parseValue = (value, props) => {\n\t\tif (Array.isArray(value)) {\n\t\t\treturn props.data.filter(item => value.includes(item.value));\n\t\t}\n\t\treturn props.data.filter(item => item.value === value);\n\t};\n\n\tstatic defaultQuery = (value, props) => {\n\t\tlet query = null;\n\t\tif (value && value.length) {\n\t\t\tquery = {\n\t\t\t\tbool: {\n\t\t\t\t\tboost: 1.0,\n\t\t\t\t\tminimum_should_match: 1,\n\t\t\t\t\tshould: value.map(item => ({\n\t\t\t\t\t\tterm: {\n\t\t\t\t\t\t\t[props.dataField]: item.value,\n\t\t\t\t\t\t},\n\t\t\t\t\t})),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\t\treturn query;\n\t};\n\n\thandleToggle = (value, isDefaultValue = false, props = this.props) => {\n\t\tconst { currentValue } = this.state;\n\t\tconst toggleValue = value;\n\t\tlet finalValue = [];\n\n\t\tif (isDefaultValue) {\n\t\t\tfinalValue = ToggleButton.parseValue(toggleValue, props);\n\t\t} else if (this.props.multiSelect) {\n\t\t\tfinalValue = currentValue.some(item => item.value === toggleValue.value)\n\t\t\t\t? currentValue.filter(item => item.value !== toggleValue.value)\n\t\t\t\t: currentValue.concat(toggleValue);\n\t\t} else {\n\t\t\tfinalValue = currentValue.some(item => item.value === toggleValue.value)\n\t\t\t\t? []\n\t\t\t\t: [toggleValue];\n\t\t}\n\n\t\tthis.setValue(finalValue);\n\t}\n\n\tsetReact(props) {\n\t\tif (props.react) {\n\t\t\tprops.watchComponent(props.componentId, props.react);\n\t\t}\n\t}\n\n\tsetValue = (value, props = this.props) => {\n\t\t// ignore state updates when component is locked\n\t\tif (props.beforeValueChange && this.locked) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.locked = true;\n\t\tconst performUpdate = () => {\n\t\t\tthis.setState({\n\t\t\t\tcurrentValue: value,\n\t\t\t}, () => {\n\t\t\t\tthis.updateQuery(value, props);\n\t\t\t\tthis.locked = false;\n\t\t\t\tif (props.onValueChange) props.onValueChange(value);\n\t\t\t});\n\t\t};\n\t\tcheckValueChange(\n\t\t\tprops.componentId,\n\t\t\tprops.multiSelect ? value : value[0],\n\t\t\tprops.beforeValueChange,\n\t\t\tperformUpdate,\n\t\t);\n\t};\n\n\tupdateQuery = (value, props) => {\n\t\tconst query = props.customQuery || ToggleButton.defaultQuery;\n\n\t\tlet filterValue = value;\n\t\tif (!props.multiSelect) {\n\t\t\tfilterValue = value[0] ? value[0].value : null;\n\t\t}\n\t\tprops.updateQuery({\n\t\t\tcomponentId: props.componentId,\n\t\t\tquery: query(value, props),\n\t\t\tvalue: filterValue,\t// sets a string in URL not array\n\t\t\tlabel: props.filterLabel,\n\t\t\tshowFilter: props.showFilter,\n\t\t\tURLParams: props.URLParams,\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<Container style={this.props.style} className={`${toggleButtons} ${this.props.className || ''}`}>\n\t\t\t\t{\n\t\t\t\t\tthis.props.title\n\t\t\t\t\t&& <Title className={getClassName(this.props.innerClass, 'title') || null}>{this.props.title}</Title>\n\t\t\t\t}\n\t\t\t\t{this.props.data.map((item) => {\n\t\t\t\t\tconst isSelected = this.state.currentValue.some(value => value.value === item.value);\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName={`${getClassName(this.props.innerClass, 'button')} ${isSelected ? 'active' : ''}`}\n\t\t\t\t\t\t\tonClick={() => this.handleToggle(item)}\n\t\t\t\t\t\t\tkey={item.value}\n\t\t\t\t\t\t\tprimary={isSelected}\n\t\t\t\t\t\t\tlarge\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{item.label}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nToggleButton.propTypes = {\n\taddComponent: types.funcRequired,\n\tremoveComponent: types.funcRequired,\n\tsetQueryListener: types.funcRequired,\n\tupdateQuery: types.funcRequired,\n\twatchComponent: types.funcRequired,\n\tselectedValue: types.selectedValue,\n\t// component props\n\tclassName: types.string,\n\tcomponentId: types.stringRequired,\n\tdata: types.data,\n\tdataField: types.stringRequired,\n\tdefaultSelected: types.stringOrArray,\n\tfilterLabel: types.string,\n\tinnerClass: types.style,\n\tmultiSelect: types.bool,\n\tonQueryChange: types.func,\n\treact: types.react,\n\tshowFilter: types.bool,\n\tstyle: types.style,\n\ttitle: types.title,\n\tURLParams: types.bool,\n};\n\nToggleButton.defaultProps = {\n\tclassName: null,\n\tmultiSelect: true,\n\tshowFilter: true,\n\tstyle: {},\n\tURLParams: false,\n};\n\nconst mapStateToProps = (state, props) => ({\n\tselectedValue:\n\t\t(state.selectedValues[props.componentId]\n\t\t\t&& state.selectedValues[props.componentId].value)\n\t\t|| null,\n});\n\nconst mapDispatchtoProps = dispatch => ({\n\taddComponent: component => dispatch(addComponent(component)),\n\tremoveComponent: component => dispatch(removeComponent(component)),\n\tupdateQuery: updateQueryObject => dispatch(updateQuery(updateQueryObject)),\n\twatchComponent: (component, react) => dispatch(watchComponent(component, react)),\n\tsetQueryListener: (component, onQueryChange, beforeQueryChange) =>\n\t\tdispatch(setQueryListener(component, onQueryChange, beforeQueryChange)),\n});\n\nexport default connect(mapStateToProps, mapDispatchtoProps)(ToggleButton);\n"]}